# -*- coding: utf-8 -*-
"""Home Loan Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16LKTU6CPXS2VevCQMerfdF12Nit_4N8t
"""

import pandas as pd 
import matplotlib.pyplot as plt
import pickle

Test_HomeLoan_df = pd.read_csv('Test_Loan_Home.csv')
Test_HomeLoan_df.info()

df_homeLoan = pd.read_csv('Train_Loan_Home.csv')
df_homeLoan.head()

df_homeLoan.describe()

df_homeLoan.drop('Loan_ID',axis=1,inplace=True)
Test_HomeLoan_df.drop('Loan_ID',axis=1,inplace=True)
df_homeLoan.head()

df_homeLoan.isna().any()

df_homeLoan = df_homeLoan.dropna()
df_homeLoan = df_homeLoan.reset_index(drop = True)

Test_HomeLoan_df = Test_HomeLoan_df.dropna()
Test_HomeLoan_df = Test_HomeLoan_df.reset_index(drop = True)

df_homeLoan.isna().any()

df_homeLoan.info()

from sklearn.preprocessing import LabelEncoder
label = LabelEncoder()

df_homeLoan['Gender'] = label.fit_transform(df_homeLoan['Gender'])
df_homeLoan['Married'] = label.fit_transform(df_homeLoan['Married'])
df_homeLoan['Dependents'] = label.fit_transform(df_homeLoan['Dependents'])
df_homeLoan['Education'] = label.fit_transform(df_homeLoan['Education'])
df_homeLoan['Self_Employed'] = label.fit_transform(df_homeLoan['Self_Employed'])
df_homeLoan['Property_Area'] = label.fit_transform(df_homeLoan['Property_Area'])
df_homeLoan['Loan_Status'] = label.fit_transform(df_homeLoan['Loan_Status'])

df_homeLoan.head()

Test_HomeLoan_df['Gender'] = label.fit_transform(Test_HomeLoan_df['Gender'])
Test_HomeLoan_df['Married'] = label.fit_transform(Test_HomeLoan_df['Married'])
Test_HomeLoan_df['Dependents'] = label.fit_transform(Test_HomeLoan_df['Dependents'])
Test_HomeLoan_df['Education'] = label.fit_transform(Test_HomeLoan_df['Education'])
Test_HomeLoan_df['Self_Employed'] = label.fit_transform(Test_HomeLoan_df['Self_Employed'])
Test_HomeLoan_df['Property_Area'] = label.fit_transform(Test_HomeLoan_df['Property_Area'])

Test_HomeLoan_df.head()

from sklearn.model_selection import train_test_split
X = df_homeLoan.iloc[:,:-1]
Y = df_homeLoan[['Loan_Status']]
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.1,random_state=2)

# from sklearn.linear_model import LogisticRegression
# lr = LogisticRegression()
# lr.fit(X,Y)
# y_pred = lr.predict(Test_HomeLoan_df)
# y_pred

# lr.score(X,Y)

# from sklearn.neighbors import KNeighborsClassifier
# knnC = KNeighborsClassifier()
# knnC.fit(X,Y)
# y_pred = knnC.predict(Test_HomeLoan_df)
# knnC.score(X,Y)

# from sklearn.svm import SVC 
# svc = SVC()
# svc.fit(X,Y)
# y_pred = svc.predict(Test_HomeLoan_df)
# svc.score(X,Y)

# from sklearn.tree import DecisionTreeClassifier
# dc = DecisionTreeClassifier()
# dc.fit(X,Y)
# y_pred = dc.predict(Test_HomeLoan_df)
# dc.score(X,Y)

# from sklearn import tree 
# tree.plot_tree(dc)

from sklearn.ensemble import RandomForestClassifier, VotingClassifier

rfc = RandomForestClassifier()
rfc.fit(x_train,y_train)
y_pred = rfc.predict(x_test)
rfc.score(X,Y)

pickle.dump(rfc, open('model.pkl','wb'))

# from sklearn.metrics import confusion_matrix, plot_confusion_matrix,accuracy_score
# c = confusion_matrix(y_test,y_pred)

# print(c)
# print()

# plot_confusion_matrix(rfc,x_test,y_test)

# print()
# print("Accuracy: ",accuracy_score(y_test,y_pred))